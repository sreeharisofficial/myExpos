breakpoint;
loadi(65,7);
loadi(66,8);
loadi(22,35);
loadi(23,36);
loadi(2, 15);
loadi(3, 16);
loadi(63,13);
loadi(64,14);
loadi(4, 17);
loadi(5, 18);
loadi(16,29);
loadi(17,30);


loadi(50,63);
loadi(51,64);
loadi(40,53);
loadi(41,54);
loadi(48,61);
loadi(49,62);

loadi(8,21);
loadi(9,22);
loadi(14,27);
loadi(15,28);

loadi(20,33);
loadi(21,34);
loadi(42,55);
loadi(43,56);
loadi(44,57);
loadi(45,58);
loadi(59,3);
loadi(60,4);

loadi(6,19);
loadi(7,20);

loadi(61,2);

loadi(18,31);
loadi(19,32);

[TERMINAL_STATUS_TABLE+0]=0;
[DISK_STATUS_TABLE+0]=0;

//INIT#############################################

PTBR=PAGE_TABLE_BASE + 20;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";


//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

[PROCESS_TABLE + 16 + 1]=1;
[PROCESS_TABLE + 16 + 4]=CREATED;
[PROCESS_TABLE + 16 + 11]=80;
[PROCESS_TABLE + 16 + 13]=8*512;
[PROCESS_TABLE + 16 + 12]=0;
[PROCESS_TABLE + 16 + 14]=PTBR;
[PROCESS_TABLE + 16 + 15]=10;

[DISK_MAP_TABLE + 10 + 0]=-1;
[DISK_MAP_TABLE + 10 + 1]=-1;
[DISK_MAP_TABLE + 10 + 2]=-1;
[DISK_MAP_TABLE + 10 + 3]=-1;
[DISK_MAP_TABLE + 10 + 4]=65;
[DISK_MAP_TABLE + 10 + 5]=66;
[DISK_MAP_TABLE + 10 + 6]=-1;
[DISK_MAP_TABLE + 10 + 7]=-1;
[DISK_MAP_TABLE + 10 + 8]=-1;
[DISK_MAP_TABLE + 10 + 9]=-1;

PTLR=10;

[76*512] = [65*512+1];

alias counter R0;



counter=32;
while(counter<=240)do
	[PROCESS_TABLE+counter+4]=TERMINATED;
	counter=counter+16;
endwhile;

counter=0;
while(counter<128)do
	if(counter<83)then
		[MEMORY_FREE_LIST+counter]=1;
	else
		[MEMORY_FREE_LIST+counter]=0;
	endif;
	counter=counter+1;
endwhile;
[SYSTEM_STATUS_TABLE+2]=45;
[SYSTEM_STATUS_TABLE+3]=0;
breakpoint;
return;
