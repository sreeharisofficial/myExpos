breakpoint;
loadi(65,7);
loadi(66,8);
loadi(22,35);
loadi(23,36);
loadi(2, 15);
loadi(3, 16);
loadi(63,13);
loadi(64,14);
loadi(4, 17);
loadi(5, 18);
loadi(16,29);
loadi(17,30);
loadi(69,11);
loadi(70,12);
loadi(83,70);
loadi(84,71);
loadi(50,63);
loadi(51,64);

//INIT#############################################

PTBR=PAGE_TABLE_BASE + 20;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";


//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

[PROCESS_TABLE + 16 + 1]=1;
[PROCESS_TABLE + 16 + 4]=CREATED;
[PROCESS_TABLE + 16 + 11]=80;
[PROCESS_TABLE + 16 + 13]=8*512;
[PROCESS_TABLE + 16 + 12]=0;
[PROCESS_TABLE + 16 + 14]=PTBR;
[PROCESS_TABLE + 16 + 15]=10;

PTLR=10;

[76*512] = [65*512+1];

//EVEN############################################
PTBR=PAGE_TABLE_BASE+40;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 85;
[PTBR+5] = "0110";
[PTBR+6] = 86;
[PTBR+7] = "0110";


//Code
[PTBR+8] = 83;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";


//Stack
[PTBR+16] = 87;
[PTBR+17] = "0110";
[PTBR+18] = 88;
[PTBR+19] = "0110";

[PROCESS_TABLE + 32 + 1]=2;
[PROCESS_TABLE + 32 + 4]=CREATED;
[PROCESS_TABLE + 32 + 11]=89;
[PROCESS_TABLE + 32 + 13]=8*512;
[PROCESS_TABLE + 32 + 12]=0;
[PROCESS_TABLE + 32 + 14]=PTBR;
[PROCESS_TABLE + 32 + 15]=10;

PTLR=10;

[87*512] = [83*512+1];


//PRIMES#############################################################3

PTBR=PAGE_TABLE_BASE+60;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 90;
[PTBR+5] = "0110";
[PTBR+6] = 91;
[PTBR+7] = "0110";


//Code
[PTBR+8] = 84;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";


//Stack
[PTBR+16] = 92;
[PTBR+17] = "0110";
[PTBR+18] = 93;
[PTBR+19] = "0110";

[PROCESS_TABLE + 48 + 1]=3;
[PROCESS_TABLE + 48 + 4]=CREATED;
[PROCESS_TABLE + 48 + 11]=94;
[PROCESS_TABLE + 48 + 13]=8*512;
[PROCESS_TABLE + 48 + 12]=0;
[PROCESS_TABLE + 48 + 14]=PTBR;
[PROCESS_TABLE + 48 + 15]=10;

PTLR=10;

[92*512] = [84*512+1];

alias counter R0;
counter=64;
while(counter<=240)do
	[PROCESS_TABLE+counter+4]=TERMINATED;
	counter=counter+16;
endwhile;
breakpoint;
return;

